package com.co.lista_deseos.web.controller;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.co.lista_deseos.clients.modelsdto.LibroListaLibros;
import com.co.lista_deseos.clients.modelsdto.ListaDeLibros;
import com.co.lista_deseos.clients.modelsdto.MaestroUsuarios;
import com.co.lista_deseos.clients.modelsdto.apibooksgoogle.GBVolumeInfoWrapper;
import com.co.lista_deseos.web.models.service.ClienteServices;

/**
 * 
 * @author PQ
 * 03/10/2022
 * Controlador Inicial de la aplicaci√≥n web, se encarga de las acciones
 */
@Controller
public class ControladorInicial {
	
	/*
	 @ModelAttribute("contador")
	  public int getContador() {
	    
	    return 5;
	  }
	 */
	
	private Long idUsuario, idListaLibros;
	
	@Autowired
	ClienteServices clienteServices;	
	
	@GetMapping("/libreria")
	public String loggin(Model model) {
		model.addAttribute("identificacion","");
		return "logging";
	}
	
	
    @PostMapping("/ingresarSistema")
    public String ingresarSistema(@RequestParam("loggin") String loggin,@RequestParam("password") String password,Model model){
    	if(loggin==null || "".equals(loggin))
    		return "logging";
    	MaestroUsuarios usuario = clienteServices.obtenerUsuarioLogginPassword(loggin,password);
    	if(usuario==null)
    		return "logging";
    	model.addAttribute("maestroUsuarios", usuario==null?new MaestroUsuarios():usuario);
    	consultarListasDeLibrosByUsuario(usuario.getIdUsuario(), model);	
    	return "paginaPrincipal";
    }	
	
	@GetMapping("/openRegistroUsuario")
	public String openRegistroUsuario(Model model) {
		model.addAttribute("maestroUsuarios",new MaestroUsuarios());
		return "registroUsuario";
	}
	
    @PostMapping("/guardarUsuario")
    public String guardarUsuario(@Valid MaestroUsuarios admUsuario,Errors errores){
        if(errores.hasErrors()){
            return "openRegistroUsuario";
        }
        clienteServices.guardarUsuario(admUsuario);
        return "logging";
    }  
    
	@GetMapping("/agregarListaLibros/{idUsuario}")
	public String agregarListaLibros(MaestroUsuarios maestro,Model model) {
		ListaDeLibros listaDeLibros = new ListaDeLibros();
		listaDeLibros.setIdMaestroUsuario(maestro.getIdUsuario());
		model.addAttribute("listaDeLibros",listaDeLibros);
		return "editarListaLibros";
	}
	
	@GetMapping("/editarListaLibros/{idListaLibros}/{idMaestroUsuario}")
	public String editarListaLibros(ListaDeLibros listaDeLibros,Model model) {
		listaDeLibros.setIdMaestroUsuario(listaDeLibros.getIdMaestroUsuario());
		listaDeLibros.setIdListaLibros(listaDeLibros.getIdListaLibros());
		listaDeLibros.setsNombreLista(listaDeLibros.getsNombreLista());
		model.addAttribute("listaDeLibros",listaDeLibros);
		
		idUsuario=listaDeLibros.getIdMaestroUsuario();
		idListaLibros = listaDeLibros.getIdListaLibros();
		
		var lista = clienteServices.obtenerLibrosDeLista(listaDeLibros.getIdListaLibros());
    	model.addAttribute("librosDeLista", lista);			
		
	
		return "editarListaLibros";
	}	
	
	@GetMapping("/asociarLibroLista/{id}/{title}/{autorsString}/{publisher}")
    public String asociarLibroLista(@Valid GBVolumeInfoWrapper gBVolumeInfoWrapper,Errors errores, Model model){
        if(errores.hasErrors()){
            return "paginaPrincipal";
        }
        LibroListaLibros libro = new LibroListaLibros();
        libro.setsAutorLibro(gBVolumeInfoWrapper.getAutorsString());
        libro.setsEditorialLibro(gBVolumeInfoWrapper.getPublisher());
        libro.setsIdLibroApiGoogle(gBVolumeInfoWrapper.getId());
        libro.setsNombreLibro(gBVolumeInfoWrapper.getTitle());
        libro.setIdListaLibros(idListaLibros);
        clienteServices.guardarLibroEnLista(libro);
        
        MaestroUsuarios usuario = new MaestroUsuarios();
        usuario.setIdUsuario(idUsuario);
        model.addAttribute("maestroUsuarios",usuario);
        consultarListasDeLibrosByUsuario(idUsuario, model);
        return "paginaPrincipal";
	}
	

    @PostMapping("/guardarListaLibros")
    public String guardarListaLibros(@Valid ListaDeLibros listaDeLibros,Errors errores, Model model){
        if(errores.hasErrors()){
            return "paginaPrincipal";
        }
        clienteServices.guardarListaDeLibros(listaDeLibros);
        
        MaestroUsuarios usuario = new MaestroUsuarios();
        usuario.setIdUsuario(listaDeLibros.getIdMaestroUsuario());
        model.addAttribute("maestroUsuarios",usuario);
        consultarListasDeLibrosByUsuario(listaDeLibros.getIdMaestroUsuario(), model);
        return "paginaPrincipal";
    }  
    
	@GetMapping("/obtenerListaDeLibrosByUsuario")
	public String obtenerListaDeLibrosByUsuario(@RequestParam("idUsuario") Long idUsuario, Model model) {
		
		consultarListasDeLibrosByUsuario(idUsuario, model);	
		return "registroUsuario";
	}   
	
	
	@RequestMapping(value="/guardarListaLibros", method=RequestMethod.POST, params="action=buscarLibros")
	public String buscarLibros(@Valid ListaDeLibros listaDeLibros,Model model,@RequestParam("nombreLibro") String nombreLibro,@RequestParam("autorLibro") String autorLibro) {
		var listaLibrosGoogle = clienteServices.obtenerLibrosGoole(nombreLibro, autorLibro);
		model.addAttribute("listaDeLibros",listaDeLibros);
		model.addAttribute("listaLibrosGoogle",listaLibrosGoogle);
		return "editarListaLibros";
	}
	
	private void consultarListasDeLibrosByUsuario(Long idUsuario,Model model) {
		var lista = clienteServices.obtenerListaDeLibrosByUsuario(idUsuario);
    	model.addAttribute("listasLibrosUsuarios", lista);		
	}
	
	
    @GetMapping("/eliminarLibro") 
    public String eliminarServicio(LibroListaLibros entidad){
    	clienteServices.eliminarLibro(entidad);
        return "";
    }  
	
}
